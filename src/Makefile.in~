# Makefile.in generated by automake 1.10.2 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = mdptetris$(EXEEXT) mdptetris_lambda_pi$(EXEEXT) \
	mdptetris_cross_entropy$(EXEEXT) \
	mdptetris_value_iteration$(EXEEXT) \
	mdptetris_play_games$(EXEEXT) \
	mdptetris_estimate_duration$(EXEEXT) \
	mdptetris_view_game$(EXEEXT) mdptetris_uct$(EXEEXT) \
	mdptetris_cmaes$(EXEEXT) mdptetris_rlc$(EXEEXT) \
	mdptetris_lspi$(EXEEXT)
check_PROGRAMS = hashtable_test$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_hashtable_test_OBJECTS = hashtable.$(OBJEXT) \
	hashtable_test.$(OBJEXT)
hashtable_test_OBJECTS = $(am_hashtable_test_OBJECTS)
hashtable_test_LDADD = $(LDADD)
am_mdptetris_OBJECTS = tetris.$(OBJEXT) hashtable.$(OBJEXT) \
	game.$(OBJEXT) games_statistics.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) strategy.$(OBJEXT) \
	strategy_random.$(OBJEXT) strategy_fixed_weights.$(OBJEXT) \
	strategy_value_iteration.$(OBJEXT) simple_tetris.$(OBJEXT) \
	feature_policy.$(OBJEXT) feature_functions.$(OBJEXT) \
	rewards.$(OBJEXT) interruptions.$(OBJEXT) random.$(OBJEXT) \
	graphics.$(OBJEXT)
mdptetris_OBJECTS = $(am_mdptetris_OBJECTS)
mdptetris_LDADD = $(LDADD)
am_mdptetris_cmaes_OBJECTS = cmaes.$(OBJEXT) cmaes_main.$(OBJEXT) \
	game.$(OBJEXT) last_move_info.$(OBJEXT) piece.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) random.$(OBJEXT) \
	file_tools.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	games_statistics.$(OBJEXT)
mdptetris_cmaes_OBJECTS = $(am_mdptetris_cmaes_OBJECTS)
mdptetris_cmaes_LDADD = $(LDADD)
am_mdptetris_cross_entropy_OBJECTS = cross_entropy.$(OBJEXT) \
	cross_entropy_parameters.$(OBJEXT) common_parameters.$(OBJEXT) \
	game.$(OBJEXT) last_move_info.$(OBJEXT) piece.$(OBJEXT) \
	file_tools.$(OBJEXT) board.$(OBJEXT) brick_masks.$(OBJEXT) \
	feature_policy.$(OBJEXT) feature_functions.$(OBJEXT) \
	rewards.$(OBJEXT) interruptions.$(OBJEXT) \
	games_statistics.$(OBJEXT) strategy_fixed_weights.$(OBJEXT) \
	cross_entropy_noise.$(OBJEXT) random.$(OBJEXT) \
	estimate_duration.$(OBJEXT)
mdptetris_cross_entropy_OBJECTS =  \
	$(am_mdptetris_cross_entropy_OBJECTS)
mdptetris_cross_entropy_LDADD = $(LDADD)
am_mdptetris_estimate_duration_OBJECTS =  \
	estimate_duration_main.$(OBJEXT) estimate_duration.$(OBJEXT) \
	game.$(OBJEXT) games_statistics.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) strategy.$(OBJEXT) \
	strategy_fixed_weights.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	interruptions.$(OBJEXT) random.$(OBJEXT) graphics.$(OBJEXT)
mdptetris_estimate_duration_OBJECTS =  \
	$(am_mdptetris_estimate_duration_OBJECTS)
mdptetris_estimate_duration_LDADD = $(LDADD)
am_mdptetris_lambda_pi_OBJECTS = lambda_policy_iteration.$(OBJEXT) \
	lambda_policy_iteration_parameters.$(OBJEXT) \
	common_parameters.$(OBJEXT) game.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	interruptions.$(OBJEXT) games_statistics.$(OBJEXT) \
	strategy_fixed_weights.$(OBJEXT) random.$(OBJEXT)
mdptetris_lambda_pi_OBJECTS = $(am_mdptetris_lambda_pi_OBJECTS)
mdptetris_lambda_pi_LDADD = $(LDADD)
am_mdptetris_lspi_OBJECTS = lspi.$(OBJEXT) lspi_parameters.$(OBJEXT) \
	common_parameters.$(OBJEXT) game.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	interruptions.$(OBJEXT) games_statistics.$(OBJEXT) \
	strategy_fixed_weights.$(OBJEXT) random.$(OBJEXT)
mdptetris_lspi_OBJECTS = $(am_mdptetris_lspi_OBJECTS)
mdptetris_lspi_LDADD = $(LDADD)
am_mdptetris_play_games_OBJECTS = play_games.$(OBJEXT) game.$(OBJEXT) \
	games_statistics.$(OBJEXT) last_move_info.$(OBJEXT) \
	piece.$(OBJEXT) file_tools.$(OBJEXT) board.$(OBJEXT) \
	brick_masks.$(OBJEXT) strategy.$(OBJEXT) \
	strategy_fixed_weights.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	interruptions.$(OBJEXT) random.$(OBJEXT) graphics.$(OBJEXT)
mdptetris_play_games_OBJECTS = $(am_mdptetris_play_games_OBJECTS)
mdptetris_play_games_LDADD = $(LDADD)
am_mdptetris_rlc_OBJECTS = rlc.$(OBJEXT) rlc_parameters.$(OBJEXT) \
	common_parameters.$(OBJEXT) game.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	interruptions.$(OBJEXT) games_statistics.$(OBJEXT) \
	strategy_fixed_weights.$(OBJEXT) cross_entropy_noise.$(OBJEXT) \
	random.$(OBJEXT) estimate_duration.$(OBJEXT)
mdptetris_rlc_OBJECTS = $(am_mdptetris_rlc_OBJECTS)
mdptetris_rlc_LDADD = $(LDADD)
am_mdptetris_uct_OBJECTS = uct.$(OBJEXT) hashtable.$(OBJEXT) \
	game.$(OBJEXT) last_move_info.$(OBJEXT) piece.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) random.$(OBJEXT) \
	file_tools.$(OBJEXT) feature_policy.$(OBJEXT) \
	feature_functions.$(OBJEXT) rewards.$(OBJEXT) \
	games_statistics.$(OBJEXT)
mdptetris_uct_OBJECTS = $(am_mdptetris_uct_OBJECTS)
mdptetris_uct_LDADD = $(LDADD)
am_mdptetris_value_iteration_OBJECTS = value_iteration.$(OBJEXT) \
	simple_tetris.$(OBJEXT) game.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) interruptions.$(OBJEXT) \
	random.$(OBJEXT) feature_functions.$(OBJEXT) \
	feature_policy.$(OBJEXT) games_statistics.$(OBJEXT) \
	rewards.$(OBJEXT)
mdptetris_value_iteration_OBJECTS =  \
	$(am_mdptetris_value_iteration_OBJECTS)
mdptetris_value_iteration_LDADD = $(LDADD)
am_mdptetris_view_game_OBJECTS = view_game.$(OBJEXT) game.$(OBJEXT) \
	last_move_info.$(OBJEXT) piece.$(OBJEXT) file_tools.$(OBJEXT) \
	board.$(OBJEXT) brick_masks.$(OBJEXT) random.$(OBJEXT) \
	feature_functions.$(OBJEXT) feature_policy.$(OBJEXT) \
	games_statistics.$(OBJEXT) rewards.$(OBJEXT)
mdptetris_view_game_OBJECTS = $(am_mdptetris_view_game_OBJECTS)
mdptetris_view_game_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(hashtable_test_SOURCES) $(mdptetris_SOURCES) \
	$(mdptetris_cmaes_SOURCES) $(mdptetris_cross_entropy_SOURCES) \
	$(mdptetris_estimate_duration_SOURCES) \
	$(mdptetris_lambda_pi_SOURCES) $(mdptetris_lspi_SOURCES) \
	$(mdptetris_play_games_SOURCES) $(mdptetris_rlc_SOURCES) \
	$(mdptetris_uct_SOURCES) $(mdptetris_value_iteration_SOURCES) \
	$(mdptetris_view_game_SOURCES)
DIST_SOURCES = $(hashtable_test_SOURCES) $(mdptetris_SOURCES) \
	$(mdptetris_cmaes_SOURCES) $(mdptetris_cross_entropy_SOURCES) \
	$(mdptetris_estimate_duration_SOURCES) \
	$(mdptetris_lambda_pi_SOURCES) $(mdptetris_lspi_SOURCES) \
	$(mdptetris_play_games_SOURCES) $(mdptetris_rlc_SOURCES) \
	$(mdptetris_uct_SOURCES) $(mdptetris_value_iteration_SOURCES) \
	$(mdptetris_view_game_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build_alias = @build_alias@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

# C++ flags
AM_CPPFLAGS = -DDATADIR_="$(datadir)/mdptetris" -Wall -Werror -ansi -pedantic -I$(top_srcdir)/include

# source files needed by each executable
mdptetris_SOURCES = tetris.c hashtable.c game.c games_statistics.c last_move_info.c piece.c file_tools.c board.c brick_masks.c strategy.c strategy_random.c strategy_fixed_weights.c strategy_value_iteration.c simple_tetris.c feature_policy.c feature_functions.c rewards.c interruptions.c random.c graphics.c 
mdptetris_lambda_pi_SOURCES = lambda_policy_iteration.c lambda_policy_iteration_parameters.c common_parameters.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c feature_policy.c feature_functions.c rewards.c interruptions.c games_statistics.c strategy_fixed_weights.c random.c
mdptetris_cross_entropy_SOURCES = cross_entropy.c cross_entropy_parameters.c common_parameters.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c feature_policy.c feature_functions.c rewards.c interruptions.c games_statistics.c strategy_fixed_weights.c cross_entropy_noise.c random.c estimate_duration.c
mdptetris_value_iteration_SOURCES = value_iteration.c simple_tetris.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c interruptions.c random.c feature_functions.c feature_policy.c games_statistics.c rewards.c
mdptetris_play_games_SOURCES = play_games.c game.c games_statistics.c last_move_info.c piece.c file_tools.c board.c brick_masks.c strategy.c strategy_fixed_weights.c feature_policy.c feature_functions.c rewards.c interruptions.c random.c graphics.c
mdptetris_estimate_duration_SOURCES = estimate_duration_main.c estimate_duration.c game.c games_statistics.c last_move_info.c piece.c file_tools.c board.c brick_masks.c strategy.c strategy_fixed_weights.c feature_policy.c feature_functions.c rewards.c interruptions.c random.c graphics.c
mdptetris_view_game_SOURCES = view_game.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c random.c feature_functions.c feature_policy.c games_statistics.c rewards.c
mdptetris_uct_SOURCES = uct.c hashtable.c game.c last_move_info.c piece.c board.c brick_masks.c random.c file_tools.c feature_policy.c feature_functions.c rewards.c games_statistics.c
mdptetris_cmaes_SOURCES = cmaes.c cmaes_main.c game.c last_move_info.c piece.c board.c brick_masks.c random.c file_tools.c feature_policy.c feature_functions.c rewards.c games_statistics.c
mdptetris_rlc_SOURCES = rlc.c rlc_parameters.c common_parameters.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c feature_policy.c feature_functions.c rewards.c interruptions.c games_statistics.c strategy_fixed_weights.c cross_entropy_noise.c random.c estimate_duration.c
mdptetris_lspi_SOURCES = lspi.c lspi_parameters.c common_parameters.c game.c last_move_info.c piece.c file_tools.c board.c brick_masks.c feature_policy.c feature_functions.c rewards.c interruptions.c games_statistics.c strategy_fixed_weights.c random.c

# additional files to provide in a tarball release
EXTRA_DIST = \
	$(top_srcdir)/include/macros.h					\
	$(top_srcdir)/include/types.h					\
	$(top_srcdir)/include/hashtable.h				\
	$(top_srcdir)/include/random.h					\
	$(top_srcdir)/include/game.h					\
	$(top_srcdir)/include/games_statistics.h			\
	$(top_srcdir)/include/board.h					\
	$(top_srcdir)/include/brick_masks.h				\
	$(top_srcdir)/include/piece.h					\
	$(top_srcdir)/include/file_tools.h				\
	$(top_srcdir)/include/last_move_info.h				\
	$(top_srcdir)/include/rewards.h					\
	$(top_srcdir)/include/feature_policy.h				\
	$(top_srcdir)/include/feature_functions.h			\
	$(top_srcdir)/include/interruptions.h				\
	$(top_srcdir)/include/strategy.h				\
	$(top_srcdir)/include/common_parameters.h			\
	$(top_srcdir)/include/play_games.h				\
	$(top_srcdir)/include/estimate_duration.h			\
	$(top_srcdir)/include/strategy_fixed_weights.h			\
	$(top_srcdir)/include/strategy_random.h				\
	$(top_srcdir)/include/strategy_value_iteration.h		\
	$(top_srcdir)/include/simple_tetris.h				\
	$(top_srcdir)/include/lambda_policy_iteration_parameters.h	\
	$(top_srcdir)/include/cross_entropy_parameters.h		\
	$(top_srcdir)/include/cross_entropy_noise.h			\
	$(top_srcdir)/include/uct.h					\
	$(top_srcdir)/include/cmaes.h					\
	$(top_srcdir)/include/cmaes_interface.h                         \
	$(top_srcdir)/include/graphics.h                         	\
	$(top_srcdir)/include/rlc_parameters.h

TESTS = $(check_PROGRAMS)
hashtable_test_SOURCES = hashtable.c hashtable_test.c
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
hashtable_test$(EXEEXT): $(hashtable_test_OBJECTS) $(hashtable_test_DEPENDENCIES) 
	@rm -f hashtable_test$(EXEEXT)
	$(LINK) $(hashtable_test_OBJECTS) $(hashtable_test_LDADD) $(LIBS)
mdptetris$(EXEEXT): $(mdptetris_OBJECTS) $(mdptetris_DEPENDENCIES) 
	@rm -f mdptetris$(EXEEXT)
	$(LINK) $(mdptetris_OBJECTS) $(mdptetris_LDADD) $(LIBS)
mdptetris_cmaes$(EXEEXT): $(mdptetris_cmaes_OBJECTS) $(mdptetris_cmaes_DEPENDENCIES) 
	@rm -f mdptetris_cmaes$(EXEEXT)
	$(LINK) $(mdptetris_cmaes_OBJECTS) $(mdptetris_cmaes_LDADD) $(LIBS)
mdptetris_cross_entropy$(EXEEXT): $(mdptetris_cross_entropy_OBJECTS) $(mdptetris_cross_entropy_DEPENDENCIES) 
	@rm -f mdptetris_cross_entropy$(EXEEXT)
	$(LINK) $(mdptetris_cross_entropy_OBJECTS) $(mdptetris_cross_entropy_LDADD) $(LIBS)
mdptetris_estimate_duration$(EXEEXT): $(mdptetris_estimate_duration_OBJECTS) $(mdptetris_estimate_duration_DEPENDENCIES) 
	@rm -f mdptetris_estimate_duration$(EXEEXT)
	$(LINK) $(mdptetris_estimate_duration_OBJECTS) $(mdptetris_estimate_duration_LDADD) $(LIBS)
mdptetris_lambda_pi$(EXEEXT): $(mdptetris_lambda_pi_OBJECTS) $(mdptetris_lambda_pi_DEPENDENCIES) 
	@rm -f mdptetris_lambda_pi$(EXEEXT)
	$(LINK) $(mdptetris_lambda_pi_OBJECTS) $(mdptetris_lambda_pi_LDADD) $(LIBS)
mdptetris_lspi$(EXEEXT): $(mdptetris_lspi_OBJECTS) $(mdptetris_lspi_DEPENDENCIES) 
	@rm -f mdptetris_lspi$(EXEEXT)
	$(LINK) $(mdptetris_lspi_OBJECTS) $(mdptetris_lspi_LDADD) $(LIBS)
mdptetris_play_games$(EXEEXT): $(mdptetris_play_games_OBJECTS) $(mdptetris_play_games_DEPENDENCIES) 
	@rm -f mdptetris_play_games$(EXEEXT)
	$(LINK) $(mdptetris_play_games_OBJECTS) $(mdptetris_play_games_LDADD) $(LIBS)
mdptetris_rlc$(EXEEXT): $(mdptetris_rlc_OBJECTS) $(mdptetris_rlc_DEPENDENCIES) 
	@rm -f mdptetris_rlc$(EXEEXT)
	$(LINK) $(mdptetris_rlc_OBJECTS) $(mdptetris_rlc_LDADD) $(LIBS)
mdptetris_uct$(EXEEXT): $(mdptetris_uct_OBJECTS) $(mdptetris_uct_DEPENDENCIES) 
	@rm -f mdptetris_uct$(EXEEXT)
	$(LINK) $(mdptetris_uct_OBJECTS) $(mdptetris_uct_LDADD) $(LIBS)
mdptetris_value_iteration$(EXEEXT): $(mdptetris_value_iteration_OBJECTS) $(mdptetris_value_iteration_DEPENDENCIES) 
	@rm -f mdptetris_value_iteration$(EXEEXT)
	$(LINK) $(mdptetris_value_iteration_OBJECTS) $(mdptetris_value_iteration_LDADD) $(LIBS)
mdptetris_view_game$(EXEEXT): $(mdptetris_view_game_OBJECTS) $(mdptetris_view_game_DEPENDENCIES) 
	@rm -f mdptetris_view_game$(EXEEXT)
	$(LINK) $(mdptetris_view_game_OBJECTS) $(mdptetris_view_game_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/board.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brick_masks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cmaes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cmaes_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/common_parameters.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cross_entropy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cross_entropy_noise.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cross_entropy_parameters.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/estimate_duration.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/estimate_duration_main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/feature_functions.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/feature_policy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/file_tools.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/game.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/games_statistics.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/graphics.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hashtable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hashtable_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/interruptions.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lambda_policy_iteration.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lambda_policy_iteration_parameters.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/last_move_info.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lspi.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lspi_parameters.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/piece.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/play_games.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/random.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rewards.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rlc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rlc_parameters.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_tetris.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strategy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strategy_fixed_weights.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strategy_random.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strategy_value_iteration.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tetris.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uct.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/value_iteration.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/view_game.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-binPROGRAMS clean-checkPROGRAMS clean-generic ctags \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags uninstall uninstall-am uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
